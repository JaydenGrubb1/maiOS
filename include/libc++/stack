/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2024-03-22
 * @brief Adaptor class template providing LIFO access to a data structure
 * @link https://en.cppreference.com/w/cpp/container/stack @endlink
 *
 * Copyright (c) 2024, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#include <type_traits>

#include <bits/iterator_traits.h>
#include <bits/vector_base.h> // TODO replace with <deque>
#include <utility>

namespace std {
	/**
	 * @brief Adaptor class template providing LIFO access to a data structure
	 *
	 * @tparam T The type of the elements in the stack
	 * @tparam C The type of the underlying container used to store the elements
	 *
	 * @link https://en.cppreference.com/w/cpp/container/stack @endlink
	 */
	template <typename T, typename C = vector<T>> // TODO replace with deque<T>
	class stack {
	  public:
		using container_type = C;
		using value_type = typename C::value_type;
		using size_type = typename C::size_type;
		using reference = typename C::reference;
		using const_reference = typename C::const_reference;

	  private:
		C _container;

	  public:
#pragma region Constructors
		/**
		 * @brief Construct a new stack object
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/stack @endlink
		 */
		constexpr stack(void)
			requires(std::is_default_constructible_v<C>)
			: _container() {}

		/**
		 * @brief Construct a new stack object
		 *
		 * @param other The container to copy elements from
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/stack @endlink
		 */
		constexpr explicit stack(const C &other) : _container(other) {}

		/**
		 * @brief Construct a new stack object
		 *
		 * @param other The container to move elements from
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/stack @endlink
		 */
		constexpr explicit stack(C &&other) : _container(std::move(other)) {}

		/**
		 * @brief Construct a new stack object
		 *
		 * @param other The stack to copy elements from
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/stack @endlink
		 */
		constexpr stack(const stack &other) : _container(other._container) {}

		/**
		 * @brief Construct a new stack object
		 *
		 * @param other The stack to move elements from
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/stack @endlink
		 */
		constexpr stack(stack &&other) : _container(std::move(other._container)) {}

		// TODO iterator constructor

		// TODO allocator aware constructors (requires std::uses_allocator)
#pragma endregion

		/**
		 * @brief Check if the stack is empty
		 *
		 * @return true if the stack is empty, false otherwise
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/empty @endlink
		 */
		[[nodiscard]] constexpr bool empty(void) const {
			return _container.empty();
		}

		/**
		 * @brief Return the number of elements in the stack
		 *
		 * @return The number of elements in the stack
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/size @endlink
		 */
		[[nodiscard]] constexpr size_t size(void) const {
			return _container.size();
		}

		/**
		 * @brief Return a reference to the top element of the stack
		 *
		 * @return A reference to the top element of the stack
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/top @endlink
		 */
		[[nodiscard]] constexpr T &top(void) {
			return _container.back();
		}

		/**
		 * @brief Return a reference to the top element of the stack
		 *
		 * @return A reference to the top element of the stack
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/top @endlink
		 */
		[[nodiscard]] constexpr const T &top(void) const {
			return _container.back();
		}

		/**
		 * @brief Pushes the given value to the top of the stack
		 *
		 * @param value The value to push
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/push @endlink
		 */
		constexpr void push(const T &value) {
			_container.push_back(value);
		}

		/**
		 * @brief Pushes the given value to the top of the stack
		 *
		 * @param value The value to push
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/push @endlink
		 */
		constexpr void push(T &&value) {
			_container.push_back(std::move(value));
		}

		/**
		 * @brief Construct an element in-place at the top of the stack
		 *
		 * @tparam Args The types of the arguments to construct the element with
		 * @param args The arguments to construct the element with
		 * @return The constructed element
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/emplace @endlink
		 */
		template <typename... Args>
		constexpr decltype(auto) emplace(Args &&...args) {
			return _container.emplace_back(std::forward<Args>(args)...);
		}

		/**
		 * @brief Removes the top element from the stack
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/pop @endlink
		 */
		constexpr void pop(void) {
			return _container.pop_back();
		}

		/**
		 * @brief Swap the contents of this stack with another
		 *
		 * @param other The stack to swap with
		 *
		 * @link https://en.cppreference.com/w/cpp/container/stack/swap @endlink
		 */
		constexpr void swap(stack &other) {
			using std::swap;
			swap(_container, other._container);
		}

		template <typename U, typename D>
		constexpr friend bool operator==(const stack<U, D> &lhs, const stack<U, D> &rhs);

		template <typename U, typename D>
		constexpr friend auto operator<=>(const stack<U, D> &lhs, const stack<U, D> &rhs);
	};

	// Deduction guides
	// https://en.cppreference.com/w/cpp/container/stack/deduction_guides

	template <typename C>
	stack(C) -> stack<typename C::value_type, C>;

	template <typename C, typename A>
	stack(C, A) -> stack<typename C::value_type, C>;

	template <typename Iter>
	stack(Iter, Iter) -> stack<typename std::iterator_traits<Iter>::value_type>;

	template <typename Iter, typename Alloc>
	stack(Iter, Iter, Alloc) -> stack<typename std::iterator_traits<Iter>::value_type, std::vector<typename std::iterator_traits<Iter>::value_type, Alloc>>; // TODO replace with deque

	template <typename T, typename C>
	[[nodiscard]] constexpr inline bool operator==(const stack<T, C> &lhs, const stack<T, C> &rhs) {
		return lhs._container == rhs._container;
	}

	template <typename T, typename C>
	[[nodiscard]] constexpr inline auto operator<=>(const stack<T, C> &lhs, const stack<T, C> &rhs) {
		return lhs._container <=> rhs._container;
	}

	/**
	 * @brief Swap the contents of two stacks
	 *
	 * @tparam T The type of the elements in the stack
	 * @tparam C The type of the underlying container used to store the elements
	 * @param lhs The first stack
	 * @param rhs The second stack
	 *
	 * @link https://en.cppreference.com/w/cpp/container/stack/swap2 @endlink
	 */
	template <typename T, typename C>
	constexpr void swap(stack<T, C> &lhs, stack<T, C> &rhs) {
		lhs.swap(rhs);
	}

	// TODO uses_allocator<std::stack> helper
}