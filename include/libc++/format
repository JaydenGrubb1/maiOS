/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2024-04-20
 * @brief Provides type-safe formatting for strings and file streams
 * @link https://en.cppreference.com/w/cpp/header/format @endlink
 *
 * Copyright (c) 2024, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <type_traits>

#include <bits/fmt/arg.h>
#include <bits/fmt/args.h>
#include <bits/fmt/context.h>
#include <bits/fmt/formatter.h>
#include <bits/fmt/parse.h>
#include <bits/fmt/string.h>
#include <string>

namespace std {
	namespace __detail {
		template <typename Iter, typename Char>
		inline constexpr void __do_format(basic_format_context<Iter, Char> &ctx, basic_string_view<Char> fmt) {
			// TODO implement proper formatting

			for (Char c : fmt) {
				*ctx.out() = c;
				++ctx.out();
			}
		}

		template <typename Iter, typename Char, typename Context>
		inline constexpr Iter __vformat_to(Iter iter, basic_string_view<Char> fmt, const basic_format_args<Context> &args) {
			if constexpr (std::is_same_v<Iter, __format_iter<Char>>) {
				Context ctx(args, iter);
				__do_format(ctx, fmt);
				return ctx.out();
			} else {
				__format_iter_buf<Iter, Char> buffer(std::move(iter));
				__format_iter<Char> out(buffer);
				Context ctx(args, out);
				__do_format(ctx, fmt);
				return buffer.out();
			}
		}
	}

	template <typename Iter>
	inline Iter vformat_to(Iter iter, string_view fmt, format_args args) {
		return __detail::__vformat_to(iter, fmt, args);
	}

	template <typename Iter>
	inline Iter vformat_to(Iter iter, wstring_view fmt, wformat_args args) {
		return __detail::__vformat_to(iter, fmt, args);
	}

	template <typename Iter, typename... Args>
	inline Iter format_to(Iter iter, format_string<Args...> fmt, Args &&...args) {
		return vformat_to(std::move(iter), fmt.get(), make_format_args(std::forward<Args>(args)...));
	}

	template <typename Iter, typename... Args>
	inline Iter format_to(Iter iter, wformat_string<Args...> fmt, Args &&...args) {
		return vformat_to(std::move(iter), fmt.get(), make_wformat_args(std::forward<Args>(args)...));
	}

	[[nodiscard]] inline string vformat(string_view fmt, format_args args) {
		string str;
		__detail::__format_iter_buf<string::iterator, char> buffer(str.begin(), -1);
		__detail::__format_iter<char> out(buffer);
		vformat_to(out, fmt, args);
		return str;
	}

	[[nodiscard]] inline wstring vformat(wstring_view fmt, wformat_args args) {
		wstring str;
		__detail::__format_iter_buf<wstring::iterator, wchar_t> buffer(str.begin(), -1);
		__detail::__format_iter<wchar_t> out(buffer);
		vformat_to(out, fmt, args);
		return str;
	}

	template <typename... Args>
	[[nodiscard]] inline string format(format_string<Args...> fmt, Args &&...args) {
		return vformat(fmt.get(), make_format_args(args...));
	}

	template <typename... Args>
	[[nodiscard]] inline wstring format(wformat_string<Args...> fmt, Args &&...args) {
		return vformat(fmt.get(), make_wformat_args(args...));
	}

	template <typename Iter>
	struct format_to_n_result {
		Iter out;
		std::iterator_traits<Iter>::difference_type size;
	};

	template <typename Iter, typename... Args>
	format_to_n_result<Iter> format_to_n(Iter iter, typename std::iterator_traits<Iter>::difference_type n, format_string<Args...> fmt, Args &&...args) {
		__detail::__format_iter_buf<Iter, char> buffer(std::move(iter), n);
		__detail::__format_iter<char> out(buffer);
		vformat_to(out, fmt.get(), make_format_args(args...));
		return {buffer.out(), buffer.count()};
	}

	template <typename Iter, typename... Args>
	format_to_n_result<Iter> format_to_n(Iter iter, typename std::iterator_traits<Iter>::difference_type n, wformat_string<Args...> fmt, Args &&...args) {
		__detail::__format_iter_buf<Iter, wchar_t> buffer(std::move(iter), n);
		__detail::__format_iter<wchar_t> out(buffer);
		vformat_to(out, fmt.get(), make_wformat_args(args...));
		return {buffer.out(), buffer.count()};
	}

	template <typename... Args>
	[[nodiscard]] size_t formatted_size(format_string<Args...> fmt, Args &&...args) {
		__detail::__format_count_buf<char> buffer;
		__detail::__format_iter<char> out(buffer);
		vformat_to(out, fmt.get(), make_format_args(args...));
		return buffer.count();
	}

	template <typename... Args>
	[[nodiscard]] size_t formatted_size(wformat_string<Args...> fmt, Args &&...args) {
		__detail::__format_count_buf<wchar_t> buffer;
		__detail::__format_iter<wchar_t> out(buffer);
		vformat_to(out, fmt.get(), make_wformat_args(args...));
		return buffer.count();
	}
}