/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2024-03-15
 * @brief Provides various types and functions for ensuring mutual exclusion
 * @link https://en.cppreference.com/w/cpp/header/mutex @endlink
 *
 * Copyright (c) 2024, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <atomic>

namespace std {
	struct adopt_lock_t {
		explicit adopt_lock_t() = default;
	};

	inline constexpr adopt_lock_t adopt_lock{};

	// TODO defer_lock_t
	// TODO try_to_lock_t

	class spin_mutex {
	  private:
		std::atomic_flag _locked = false;

	  public:
		constexpr spin_mutex(void) = default;

		spin_mutex(const spin_mutex &) = delete;
		spin_mutex &operator=(const spin_mutex &) = delete;

		void lock(void) {
			while (_locked.test_and_set(std::memory_order::acquire)) {
				while (_locked.test(std::memory_order::relaxed)) {
					asm volatile("pause");
				}
			}
		}

		[[nodiscard]] bool try_lock(void) {
			return !_locked.test(std::memory_order::relaxed) && !_locked.test_and_set(std::memory_order::acquire);
		}

		void unlock(void) {
			_locked.clear(std::memory_order::release);
		}
	};

	// TODO recursive_spin_mutex ???
	// TODO mutex
	// TODO recursive_mutex
	// TODO timed_mutex
	// TODO recursive_timed_mutex

	template <typename T>
	class lock_guard {
	  public:
		using mutex_type = T;

	  private:
		T &_mutex;

	  public:
		explicit lock_guard(T &mutex) : _mutex(mutex) {
			_mutex.lock();
		}

		lock_guard(T &mutex, adopt_lock_t) : _mutex(mutex) {}

		lock_guard(const lock_guard &) = delete;
		lock_guard &operator=(const lock_guard &) = delete;

		~lock_guard() {
			_mutex.unlock();
		}
	};

	// TODO unique_lock
	// TODO scoped_lock
}