/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2023-12-30
 * @brief Class template encapsulating a dynamic-size sequence of characters
 * @link https://en.cppreference.com/w/cpp/string/basic_string @endlink
 *
 * Copyright (c) 2023, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#define __need_size_t
#include <stddef.h>

#include <initializer_list>
#include <type_traits>

#include <bits/allocator.h>
#include <bits/allocator_traits.h>
#include <bits/iterator_traits.h>
#include <bits/reverse_iterator.h>
#include <cassert>
#include <cstring>
#include <memory_resource>
#include <optional>
#include <string_view>

namespace std {
	namespace __detail {
		template <typename T>
		constexpr size_t __strlen(const T *str) {
			size_t len = 0;
			while (str[len] != '\0') {
				len++;
			}
			return len;
		}
	}

	/**
	 * @brief Class template encapsulating a dynamic-size sequence of characters
	 *
	 * @tparam T The underlying character type
	 * @tparam A The allocator type used to allocate memory for the vector
	 *
	 * @link https://en.cppreference.com/w/cpp/string/basic_string @endlink
	 */
	template <typename T, typename A = allocator<T>>
	class basic_string {
	  public:
		using value_type = T;
		using allocator_type = A;
		using size_type = size_t;
		using difference_type = ptrdiff_t;
		using reference = value_type &;
		using const_reference = const value_type &;
		using pointer = std::allocator_traits<A>::pointer;
		using const_pointer = std::allocator_traits<A>::const_pointer;
		using iterator = value_type *;
		using const_iterator = const value_type *;
		using reverse_iterator = std::reverse_iterator<iterator>;
		using const_reverse_iterator = std::reverse_iterator<const_iterator>;

	  private:
		[[no_unique_address]] allocator_type _alloc;

		union {
			struct {
				T *_data;
				size_t _size;
				size_t _capacity : sizeof(size_t) * 8 - 1;
				size_t _is_large : 1;
			} _large;
			struct {
				T _data[(sizeof(_large) / sizeof(T)) - 1];
				T _free : sizeof(T) * 8 - 1;
				T _is_large : 1;
			} _small;
		};

		static constexpr size_t _small_max_size = sizeof(_small) / sizeof(T) - 1;

		constexpr void __init_capacity(size_t size) {
			if (size > _small_max_size) {
				_large._data = _alloc.allocate(size + 1);
				assert(_large._data);
				_large._size = size;
				_large._capacity = size;
				_large._is_large = true;
			} else {
				_small._free = _small_max_size - size;
				_small._is_large = false;
			}
			if (size == 0) {
				data()[0] = '\0';
			}
		}

		constexpr void __set_size(size_t size) {
			if (_large._is_large) {
				_large._size = size;
			} else {
				_small._free = _small_max_size - size;
			}
		}

		constexpr T *__insert_space(T *ptr, size_t count, bool exp_growth = true, bool copy_data = true) {
			if (capacity() >= size() + count) {
				if (copy_data) {
					memmove(ptr + count, ptr, (size() - (ptr - data())) * sizeof(T));
				}
			} else {
				size_t new_capacity = exp_growth ? max(capacity() * 2, size() + count) : size() + count;

				T *new_data = _alloc.allocate(new_capacity + 1);
				assert(new_data);

				auto len = ptr - data();
				if (copy_data) {
					memmove(new_data, data(), len * sizeof(T));
					memmove(new_data + len + count, ptr, (size() - len) * sizeof(T));
				}

				if (_large._is_large) {
					_alloc.deallocate(_large._data, _large._capacity + 1);
				} else {
					_large._size = size();
					_large._is_large = true;
				}

				_large._capacity = new_capacity;
				_large._data = new_data;
				ptr = new_data + len;
			}

			return ptr;
		}

	  public:
		static constexpr size_t npos = -1;

#pragma region Constructors
		constexpr basic_string(void) {
			__init_capacity(0);
		}

		constexpr explicit basic_string(const allocator_type &alloc) : _alloc(alloc) {
			__init_capacity(0);
		}

		constexpr basic_string(size_t count, T ch, const allocator_type &alloc = allocator_type()) : _alloc(alloc) {
			__init_capacity(count);
			assign(count, ch);
		}

		constexpr basic_string(const basic_string &other, size_t pos,
							   const allocator_type alloc = allocator_type()) : _alloc(alloc) {
			if (pos > other.size()) {
				__init_capacity(0);
			} else {
				__init_capacity(other.size() - pos);
				assign(other, pos);
			}
		}

		constexpr basic_string(const basic_string &other, size_t pos, size_t count,
							   const allocator_type &alloc = allocator_type()) : _alloc(alloc) {
			if (pos > other.size()) {
				__init_capacity(0);
			} else {
				__init_capacity(count);
				assign(other, pos, count);
			}
		}

		constexpr basic_string(const T *str, size_t count, allocator_type alloc = allocator_type()) : _alloc(alloc) {
			__init_capacity(count);
			assign(str, count);
		}

		constexpr basic_string(const T *str, allocator_type alloc = allocator_type()) : _alloc(alloc) {
			size_t count = __detail::__strlen(str);
			__init_capacity(count);
			assign(str, count);
		}

		template <typename Iter>
		constexpr basic_string(Iter first, Iter last, const allocator_type &alloc = allocator_type())
			requires(!std::is_integral_v<Iter>)
			: _alloc(alloc) {
			__init_capacity(last - first);
			assign(first, last);
		}

		constexpr basic_string(const basic_string &other) : _alloc(other._alloc) {
			__init_capacity(other.size());
			assign(other);
		}

		constexpr basic_string(const basic_string &other, const allocator_type &alloc) : _alloc(alloc) {
			__init_capacity(other.size());
			assign(other);
		}

		constexpr basic_string(basic_string &&other) : _alloc(other._alloc) {
			_large = other._large;
			other._large._data = nullptr;
			other._large._size = 0;
		}

		constexpr basic_string(basic_string &&other, const allocator_type &alloc) : _alloc(alloc) {
			if (_alloc == other._alloc) {
				_large = other._large;
				other._large._data = nullptr;
				other._large._size = 0;
			} else {
				__init_capacity(other.size());
				assign(other);
			}
		}

		constexpr basic_string(std::initializer_list<T> list, const allocator_type &alloc = allocator_type())
			: _alloc(alloc) {
			__init_capacity(list.size());
			assign(list);
		}

		constexpr basic_string(const basic_string_view<T> &view, const allocator_type &alloc = allocator_type())
			: _alloc(alloc) {
			__init_capacity(view.size());
			assign(view);
		}

		constexpr basic_string(const basic_string_view<T> &view, size_t pos, size_t count,
							   const allocator_type &alloc = allocator_type())
			: _alloc(alloc) {
			if (pos > view.size()) {
				__init_capacity(0);
			} else {
				__init_capacity(count);
				assign(view, pos, count);
			}
		}

		constexpr basic_string(std::nullptr_t) = delete;
#pragma endregion

#pragma region Assignment Operators and Functions
		constexpr basic_string &assign(size_t count, T ch) {
			auto ptr = __insert_space(data(), count - size(), false, false);
			__set_size(count);

			for (size_t i = 0; i < count; i++) {
				ptr[i] = ch;
			}
			ptr[count] = '\0';

			return *this;
		}

		constexpr basic_string &assign(const basic_string &other) {
			assign(other.begin(), other.end());
			return *this;
		}

		constexpr basic_string &assign(basic_string &other, size_t pos, size_t count = npos) {
			assign(basic_string_view<T>(other), pos, count);
			return *this;
		}

		constexpr basic_string &assign(basic_string &&other) {
			if (_alloc == other._alloc) {
				_large = other._large;
				other._large._data = nullptr;
				other._large._size = 0;
			} else {
				assign(other.begin(), other.end());
			}
			return *this;
		}

		constexpr basic_string &assign(const T *str, size_t count) {
			assign(str, str + count);
			return *this;
		}

		constexpr basic_string &assign(const T *str) {
			assign(str, str + __detail::__strlen(str));
			return *this;
		}

		template <typename Iter>
		constexpr basic_string &assign(Iter first, Iter last) {
			auto len = last - first;
			auto ptr = __insert_space(data(), len - size(), false, false);
			__set_size(len);

			size_t i = 0;
			for (auto it = first; it != last; it++) {
				ptr[i++] = *it;
			}
			ptr[len] = '\0';

			return *this;
		}

		constexpr basic_string &assign(std::initializer_list<T> list) {
			assign(list.begin(), list.end());
			return *this;
		}

		constexpr basic_string &assign(const basic_string_view<T> &view) {
			assign(view.begin(), view.end());
			return *this;
		}

		constexpr basic_string &assign(const basic_string_view<T> &view, size_t pos, size_t count = npos) {
			assign(view.substr(pos, count));
			return *this;
		}

		constexpr basic_string &operator=(const basic_string &other) {
			if (this == &other) {
				return *this;
			}

			return assign(other);
		}

		constexpr basic_string &operator=(basic_string &&other) {
			if (this == &other) {
				return *this;
			}

			return assign(std::move(other));
		}

		constexpr basic_string &operator=(const T *str) {
			return assign(str);
		}

		constexpr basic_string &operator=(T ch) {
			return assign(1, ch);
		}

		constexpr basic_string &operator=(std::initializer_list<T> list) {
			return assign(list);
		}

		constexpr basic_string &operator=(const basic_string_view<T> &view) {
			return assign(view);
		}

		constexpr basic_string &operator=(std::nullptr_t) = delete;
#pragma endregion

		constexpr ~basic_string(void) {
			if (_large._is_large) {
				_alloc.deallocate(_large._data, _large._capacity + 1);
			}
		}

		[[nodiscard]] constexpr allocator_type get_allocator(void) const {
			return _alloc;
		}

#pragma region Capacity Functions
		[[nodiscard]] constexpr bool empty(void) const {
			return size() == 0;
		}

		[[nodiscard]] constexpr size_t size(void) const {
			if (_large._is_large) {
				return _large._size;
			} else {
				return _small_max_size - _small._free;
			}
		}

		[[nodiscard]] constexpr size_t length(void) const {
			return size();
		}

		[[nodiscard]] constexpr size_t capacity(void) const {
			if (_large._is_large) {
				return _large._capacity;
			} else {
				return _small_max_size;
			}
		}

		[[nodiscard]] constexpr size_t max_size(void) const {
			return INTMAX_MAX / sizeof(T);
		}

		constexpr void reserve(size_t cap) {
			assert(cap < max_size());
			if (cap < capacity()) {
				return;
			}

			T *new_data = _alloc.allocate(cap + 1);
			assert(new_data);

			memmove(new_data, data(), (size() + 1) * sizeof(T));

			if (_large._is_large) {
				_alloc.deallocate(_large._data, _large._capacity + 1);
			} else {
				_large._size = size();
				_large._is_large = true;
			}

			_large._capacity = cap;
			_large._data = new_data;
		}

		constexpr void shrink_to_fit(void) {
			if (capacity() == size() || capacity() == _small_max_size) {
				return;
			}

			size_t temp_size = size();

			T *new_data;
			if (size() > _small_max_size) {
				new_data = _alloc.allocate(temp_size + 1);
				assert(new_data);
			} else {
				new_data = _small._data;
			}

			memmove(new_data, data(), (temp_size + 1) * sizeof(T));

			if (_large._is_large) {
				_alloc.deallocate(_large._data, _large._capacity + 1);
			}

			if (temp_size > _small_max_size) {
				_large._data = new_data;
				_large._size = temp_size;
				_large._capacity = temp_size;
				_large._is_large = true;
			} else {
				_small._free = _small_max_size - temp_size;
				_small._is_large = false;
			}
		}
#pragma endregion

#pragma region Accessor Functions
		[[nodiscard]] constexpr T &operator[](size_t index) {
			return data()[index];
		}

		[[nodiscard]] constexpr const T &operator[](size_t index) const {
			return data()[index];
		}

		[[nodiscard]] constexpr optional<T &> at(size_t index) {
			if (index >= size()) {
				return {};
			}
			return data()[index];
		}

		[[nodiscard]] constexpr optional<const T &> at(size_t index) const {
			if (index >= size()) {
				return {};
			}
			return data()[index];
		}

		[[nodiscard]] constexpr T &front(void) {
			return data()[0];
		}

		[[nodiscard]] constexpr const T &front(void) const {
			return data()[0];
		}

		[[nodiscard]] constexpr T &back(void) {
			return data()[size() - 1];
		}

		[[nodiscard]] constexpr const T &back(void) const {
			return data()[size() - 1];
		}

		[[nodiscard]] constexpr T *data(void) {
			if (_large._is_large) {
				return _large._data;
			} else {
				return _small._data;
			}
		}

		[[nodiscard]] constexpr const T *data(void) const {
			if (_large._is_large) {
				return _large._data;
			} else {
				return _small._data;
			}
		}

		[[nodiscard]] constexpr const T *c_str(void) const {
			return data();
		}

		constexpr operator basic_string_view<T>(void) const {
			return basic_string_view<T>(data(), size());
		}
#pragma endregion

#pragma region Iterator Functions
		[[nodiscard]] constexpr iterator begin(void) {
			return data();
		}

		[[nodiscard]] constexpr const_iterator begin(void) const {
			return data();
		}

		[[nodiscard]] constexpr const_iterator cbegin(void) const {
			return data();
		}

		[[nodiscard]] constexpr iterator end(void) {
			return data() + size();
		}

		[[nodiscard]] constexpr const_iterator end(void) const {
			return data() + size();
		}

		[[nodiscard]] constexpr const_iterator cend(void) const {
			return data() + size();
		}

		[[nodiscard]] constexpr reverse_iterator rbegin(void) {
			return reverse_iterator(end());
		}

		[[nodiscard]] constexpr const_reverse_iterator rbegin(void) const {
			return const_reverse_iterator(end());
		}

		[[nodiscard]] constexpr const_reverse_iterator crbegin(void) const {
			return const_reverse_iterator(end());
		}

		[[nodiscard]] constexpr reverse_iterator rend(void) {
			return reverse_iterator(begin());
		}

		[[nodiscard]] constexpr const_reverse_iterator rend(void) const {
			return const_reverse_iterator(begin());
		}

		[[nodiscard]] constexpr const_reverse_iterator crend(void) const {
			return const_reverse_iterator(begin());
		}
#pragma endregion

		constexpr size_t copy(T *dest, size_t count, size_t pos = 0) const {
			if (pos > size()) {
				return 0;
			}
			size_t len = min(count, size() - pos);
			for (size_t i = 0; i < len; i++) {
				dest[i] = data()[pos + i];
			}
			return len;
		}

		[[nodiscard]] constexpr basic_string substr(size_t pos = 0, size_t count = npos) const & {
			if (pos > size()) {
				return basic_string();
			}
			return basic_string(*this, pos, min(count, size() - pos));
		}

#pragma region Comparison Functions
		[[nodiscard]] constexpr int compare(const basic_string &other) const {
			return basic_string_view<T>(*this).compare(other);
		}

		[[nodiscard]] constexpr int compare(size_t pos, size_t count, const basic_string &other) const {
			return basic_string_view<T>(*this).compare(pos, count, other);
		}

		[[nodiscard]] constexpr int compare(size_t pos1, size_t count1, const basic_string &other,
											size_t pos2, size_t count2 = npos) const {
			return basic_string_view<T>(*this).compare(pos1, count1, other, pos2, count2);
		}

		[[nodiscard]] constexpr int compare(const T *str) const {
			return basic_string_view<T>(*this).compare(str);
		}

		[[nodiscard]] constexpr int compare(size_t pos, size_t count, const T *str) const {
			return basic_string_view<T>(*this).compare(pos, count, str);
		}

		[[nodiscard]] constexpr int compare(size_t pos, size_t count1, const T *str, size_t count2) const {
			return basic_string_view<T>(*this).compare(pos, count1, str, count2);
		}

		[[nodiscard]] constexpr int compare(const basic_string_view<T> &view) const {
			return basic_string_view<T>(*this).compare(view);
		}

		[[nodiscard]] constexpr int compare(size_t pos, size_t count, const basic_string_view<T> &view) const {
			return basic_string_view<T>(*this).compare(pos, count, view);
		}

		[[nodiscard]] constexpr int compare(size_t pos1, size_t count1, const basic_string_view<T> &view,
											size_t pos2, size_t count2 = npos) const {
			return basic_string_view<T>(*this).compare(pos1, count1, view, pos2, count2);
		}
#pragma endregion

#pragma region Search Functions
		[[nodiscard]] constexpr size_t find(const basic_string &str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find(str, pos);
		}

		[[nodiscard]] constexpr size_t find(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).find(str, pos, count);
		}

		[[nodiscard]] constexpr size_t find(const T *str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find(str, pos);
		}

		[[nodiscard]] constexpr size_t find(T ch, size_t pos = 0) const {
			return basic_string_view<T>(*this).find(ch, pos);
		}

		[[nodiscard]] constexpr size_t find(const basic_string_view<T> &view, size_t pos = 0) const {
			return basic_string_view<T>(*this).find(view, pos);
		}

		[[nodiscard]] constexpr size_t rfind(const basic_string &str, size_t pos = npos) const {
			return basic_string_view<T>(*this).rfind(str, pos);
		}

		[[nodiscard]] constexpr size_t rfind(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).rfind(str, pos, count);
		}

		[[nodiscard]] constexpr size_t rfind(const T *str, size_t pos = npos) const {
			return basic_string_view<T>(*this).rfind(str, pos);
		}

		[[nodiscard]] constexpr size_t rfind(T ch, size_t pos = npos) const {
			return basic_string_view<T>(*this).rfind(ch, pos);
		}

		[[nodiscard]] constexpr size_t rfind(const basic_string_view<T> &view, size_t pos = npos) const {
			return basic_string_view<T>(*this).rfind(view, pos);
		}

		[[nodiscard]] constexpr bool starts_with(const basic_string_view<T> str) const {
			return basic_string_view<T>(*this).starts_with(str);
		}

		[[nodiscard]] constexpr bool starts_with(T ch) const {
			return basic_string_view<T>(*this).starts_with(ch);
		}

		[[nodiscard]] constexpr bool starts_with(const T *str) const {
			return basic_string_view<T>(*this).starts_with(str);
		}

		[[nodiscard]] constexpr bool ends_with(const basic_string_view<T> str) const {
			return basic_string_view<T>(*this).ends_with(str);
		}

		[[nodiscard]] constexpr bool ends_with(T ch) const {
			return basic_string_view<T>(*this).ends_with(ch);
		}

		[[nodiscard]] constexpr bool ends_with(const T *str) const {
			return basic_string_view<T>(*this).ends_with(str);
		}

		[[nodiscard]] constexpr bool contains(const basic_string_view<T> str) const {
			return basic_string_view<T>(*this).contains(str);
		}

		[[nodiscard]] constexpr bool contains(T ch) const {
			return basic_string_view<T>(*this).contains(ch);
		}

		[[nodiscard]] constexpr bool contains(const T *str) const {
			return basic_string_view<T>(*this).contains(str);
		}

		[[nodiscard]] constexpr size_t find_first_of(const basic_string &str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_first_of(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).find_first_of(str, pos, count);
		}

		[[nodiscard]] constexpr size_t find_first_of(const T *str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_first_of(T ch, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_of(ch, pos);
		}

		[[nodiscard]] constexpr size_t find_first_of(const basic_string_view<T> &view, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_of(view, pos);
		}

		[[nodiscard]] constexpr size_t find_last_of(const basic_string &str, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_last_of(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).find_last_of(str, pos, count);
		}

		[[nodiscard]] constexpr size_t find_last_of(const T *str, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_last_of(T ch, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_of(ch, pos);
		}

		[[nodiscard]] constexpr size_t find_last_of(const basic_string_view<T> &view, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_of(view, pos);
		}

		[[nodiscard]] constexpr size_t find_first_not_of(const basic_string &str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_not_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_first_not_of(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).find_first_not_of(str, pos, count);
		}

		[[nodiscard]] constexpr size_t find_first_not_of(const T *str, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_not_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_first_not_of(T ch, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_not_of(ch, pos);
		}

		[[nodiscard]] constexpr size_t find_first_not_of(const basic_string_view<T> &view, size_t pos = 0) const {
			return basic_string_view<T>(*this).find_first_not_of(view, pos);
		}

		[[nodiscard]] constexpr size_t find_last_not_of(const basic_string &str, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_not_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_last_not_of(const T *str, size_t pos, size_t count) const {
			return basic_string_view<T>(*this).find_last_not_of(str, pos, count);
		}

		[[nodiscard]] constexpr size_t find_last_not_of(const T *str, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_not_of(str, pos);
		}

		[[nodiscard]] constexpr size_t find_last_not_of(T ch, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_not_of(ch, pos);
		}

		[[nodiscard]] constexpr size_t find_last_not_of(const basic_string_view<T> &view, size_t pos = npos) const {
			return basic_string_view<T>(*this).find_last_not_of(view, pos);
		}

#pragma endregion

#pragma region Modifier Functions
#pragma region Erase Functions
		constexpr void clear(void) {
			data()[0] = '\0';
			__set_size(0);
		}

		constexpr basic_string &erase(size_t index = 0, size_t count = npos) {
			if (index > size()) {
				return *this;
			}
			count = min(count, size() - index);
			erase(data() + index, data() + index + count);
			return *this;
		}

		constexpr T *erase(const T *pos) {
			return erase(pos, pos + 1);
		}

		constexpr T *erase(const T *first, const T *last) {
			auto ptr = const_cast<T *>(first);
			auto dist = last - first;

			memmove(ptr, ptr + dist, (size() - (ptr - data()) - dist) * sizeof(T));
			__set_size(size() - dist);

			data()[size()] = '\0';

			return ptr;
		}

		constexpr void pop_back(void) {
			erase(end() - 1);
		}
#pragma endregion

#pragma region Insert Functions
		constexpr T *insert(const T *pos, size_t count, T ch) {
			auto ptr = __insert_space(const_cast<T *>(pos), count);
			for (size_t i = 0; i < count; i++) {
				ptr[i] = ch;
			}

			__set_size(size() + count);
			data()[size()] = '\0';
			return ptr;
		}

		constexpr T *insert(const T *pos, T ch) {
			return insert(pos, 1, ch);
		}

		template <typename Iter>
		constexpr T *insert(const T *pos, Iter first, Iter last)
			requires(!std::is_integral_v<Iter>)
		{
			auto ptr = __insert_space(const_cast<T *>(pos), last - first);

			size_t i = 0;
			for (auto it = first; it != last; it++) {
				ptr[i++] = *it;
			}

			__set_size(size() + i);
			data()[size()] = '\0';
			return ptr;
		}

		constexpr T *insert(const T *pos, std::initializer_list<T> list) {
			return insert(pos, list.begin(), list.end());
		}

		constexpr basic_string &insert(size_t index, size_t count, T ch) {
			insert(data() + index, count, ch);
			return *this;
		}

		constexpr basic_string &insert(size_t index, const T *str, size_t count) {
			insert(data() + index, str, str + count);
			return *this;
		}

		constexpr basic_string &insert(size_t index, const T *str) {
			insert(data() + index, str, str + __detail::__strlen(str));
			return *this;
		}

		constexpr basic_string &insert(size_t index, const basic_string &str) {
			insert(data() + index, str.begin(), str.end());
			return *this;
		}

		constexpr basic_string &insert(size_t index, const basic_string &str, size_t pos, size_t count = npos) {
			insert(index, basic_string_view<T>(str), pos, count);
			return *this;
		}

		constexpr basic_string &insert(size_t index, const basic_string_view<T> &view) {
			insert(data() + index, view.begin(), view.end());
			return *this;
		}

		constexpr basic_string &insert(size_t index, const basic_string_view<T> &view, size_t pos, size_t count = npos) {
			insert(index, view.substr(pos, count));
			return *this;
		}
#pragma endregion

#pragma region Append Functions
		constexpr void push_back(T ch) {
			insert(end(), 1, ch);
		}

		constexpr basic_string &append(size_t count, T ch) {
			insert(end(), count, ch);
			return *this;
		}

		constexpr basic_string &append(const basic_string &str) {
			insert(end(), str.begin(), str.end());
			return *this;
		}

		constexpr basic_string &append(const basic_string &str, size_t pos, size_t count = npos) {
			insert(size(), basic_string_view<T>(str), pos, count);
			return *this;
		}

		constexpr basic_string &append(const T *str) {
			insert(size(), str, __detail::__strlen(str));
			return *this;
		}

		constexpr basic_string &append(const T *str, size_t count) {
			insert(size(), str, count);
			return *this;
		}

		template <typename Iter>
		constexpr basic_string &append(Iter first, Iter last)
			requires(!std::is_integral_v<Iter>)
		{
			insert(end(), first, last);
			return *this;
		}

		constexpr basic_string &append(std::initializer_list<T> list) {
			insert(end(), list);
			return *this;
		}

		constexpr basic_string &append(const basic_string_view<T> &view) {
			insert(size(), view);
			return *this;
		}

		constexpr basic_string &append(const basic_string_view<T> &view, size_t pos, size_t count = npos) {
			insert(size(), view, pos, count);
			return *this;
		}
#pragma endregion

#pragma region Append Operators
		constexpr basic_string &operator+=(const basic_string &str) {
			return append(str);
		}

		constexpr basic_string &operator+=(T ch) {
			return append(1, ch);
		}

		constexpr basic_string &operator+=(const T *str) {
			return append(str);
		}

		constexpr basic_string &operator+=(std::initializer_list<T> list) {
			return append(list);
		}

		constexpr basic_string &operator+=(const basic_string_view<T> &view) {
			return append(view);
		}
#pragma endregion

#pragma region Replace Functions
		constexpr basic_string &replace(const T *first, const T *last, const basic_string &str) {
			return replace(first, last, str.begin(), str.end());
		}

		constexpr basic_string &replace(size_t pos, size_t count, const basic_string &str) {
			return replace(data() + pos, data() + pos + count, str.begin(), str.end());
		}

		constexpr basic_string &replace(size_t pos, size_t count, const basic_string &str, size_t offset, size_t len = npos) {
			return replace(pos, count, basic_string_view<T>(str), offset, len);
		}

		constexpr basic_string &replace(const T *first, const T *last, const basic_string_view<T> &view) {
			return replace(first, last, view.begin(), view.end());
		}

		constexpr basic_string &replace(size_t pos, size_t count, const basic_string_view<T> &view) {
			return replace(data() + pos, data() + pos + count, view.begin(), view.end());
		}

		constexpr basic_string &replace(size_t pos, size_t count, const basic_string_view<T> &view, size_t offset, size_t len = npos) {
			return replace(pos, count, view.substr(offset, len));
		}

		constexpr basic_string &replace(const T *first, const T *last, const T *str, size_t len) {
			return replace(first, last, str, str + len);
		}

		constexpr basic_string &replace(size_t pos, size_t count, const T *str, size_t len) {
			return replace(data() + pos, data() + pos + count, str, str + len);
		}

		constexpr basic_string &replace(const T *first, const T *last, const T *str) {
			return replace(first, last, str, str + __detail::__strlen(str));
		}

		constexpr basic_string &replace(size_t pos, size_t count, const T *str) {
			return replace(data() + pos, data() + pos + count, str, str + __detail::__strlen(str));
		}

		constexpr basic_string &replace(const T *first, const T *last, size_t num, T ch) {
			if (first > end()) {
				return *this;
			}

			size_t old_size = min(last, cend()) - first;
			T *ptr = const_cast<T *>(first);

			if (num > old_size) {
				ptr = __insert_space(ptr, num - old_size, true, true);
				__set_size(size() + num - old_size);
				data()[size()] = '\0';
			} else if (num < old_size) {
				ptr = erase(ptr, ptr + old_size - num);
			}

			for (size_t i = 0; i < num; i++) {
				ptr[i] = ch;
			}

			return *this;
		}

		constexpr basic_string &replace(size_t pos, size_t count, size_t num, T ch) {
			return replace(data() + pos, data() + pos + count, num, ch);
		}

		template <typename Iter>
		constexpr basic_string &replace(const T *first, const T *last, Iter start, Iter end)
			requires(!std::is_integral_v<Iter>)
		{
			if (first > this->end()) {
				return *this;
			}

			size_t old_size = min(last, this->cend()) - first;
			size_t new_size = end - start;
			T *ptr = const_cast<T *>(first);

			if (new_size > old_size) {
				ptr = __insert_space(ptr, new_size - old_size, true, true);
				__set_size(size() + new_size - old_size);
				data()[size()] = '\0';
			} else if (new_size < old_size) {
				ptr = erase(ptr, ptr + old_size - new_size);
			}

			size_t i = 0;
			for (auto it = start; it != end; it++) {
				ptr[i++] = *it;
			}

			return *this;
		}

		constexpr basic_string &replace(const T *first, const T *last, std::initializer_list<T> list) {
			return replace(first, last, list.begin(), list.end());
		}
#pragma endregion

		constexpr void resize(size_t count, T ch) {
			if (count < size()) {
				data()[count] = '\0';
			} else {
				reserve(count);
				for (size_t i = size(); i < count; i++) {
					data()[i] = ch;
				}
				data()[count] = '\0';
			}
			__set_size(count);
		}

		constexpr void resize(size_t count) {
			return resize(count, T());
		}

		constexpr void swap(basic_string &other) {
			auto temp = _large;
			_large = other._large;
			other._large = temp;
		}
#pragma endregion
	};

	// Deduction guides
	// https://en.cppreference.com/w/cpp/string/basic_string/deduction_guides

	template <typename Iter, typename Alloc = allocator<typename std::iterator_traits<Iter>::value_type>>
	basic_string(Iter, Iter, Alloc = Alloc()) -> basic_string<typename std::iterator_traits<Iter>::value_type, Alloc>;

	template <typename T, typename A = allocator<T>>
	explicit basic_string(basic_string_view<T>, const A & = A()) -> basic_string<T, A>;

	template <typename T, typename A = allocator<T>>
	basic_string(basic_string_view<T>, typename basic_string<T, A>::size_type, typename basic_string<T, A>::size_type, const A & = A()) -> basic_string<T, A>;

#pragma region Concatenation Operator
	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const basic_string<T, A> &lhs, const basic_string<T, A> &rhs) {
		basic_string<T, A> str(lhs.get_allocator());
		str.reserve(lhs.length() + rhs.length());
		str.append(lhs);
		str.append(rhs);
		return str;
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const basic_string<T, A> &lhs, const T *rhs) {
		basic_string<T, A> str(lhs.get_allocator());
		str.reserve(lhs.length() + __detail::__strlen(rhs));
		str.append(lhs);
		str.append(rhs);
		return str;
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const basic_string<T, A> &lhs, T rhs) {
		basic_string<T, A> str(lhs.get_allocator());
		str.reserve(lhs.length() + 1);
		str.append(lhs);
		str.append(1, rhs);
		return str;
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const T *lhs, const basic_string<T, A> &rhs) {
		basic_string<T, A> str(rhs.get_allocator());
		str.reserve(__detail::__strlen(lhs) + rhs.length());
		str.append(lhs);
		str.append(rhs);
		return str;
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(T lhs, const basic_string<T, A> &rhs) {
		basic_string<T, A> str(rhs.get_allocator());
		str.reserve(1 + rhs.length());
		str.append(1, lhs);
		str.append(rhs);
		return str;
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(basic_string<T, A> &&lhs, basic_string<T, A> &&rhs) {
		if (lhs.get_allocator() == rhs.get_allocator()) {
			size_t total = lhs.size() + rhs.size();
			if (total > lhs.capacity() && total <= rhs.capacity()) {
				// only use rhs if sufficent capacity and equal allocators
				return std::move(rhs.insert(0, lhs));
			}
		}
		return std::move(lhs.append(rhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(basic_string<T, A> &&lhs, const basic_string<T, A> &rhs) {
		return std::move(lhs.append(rhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(basic_string<T, A> &&lhs, const T *rhs) {
		return std::move(lhs.append(rhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(basic_string<T, A> &&lhs, T rhs) {
		return std::move(lhs.append(1, rhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const basic_string<T, A> &lhs, basic_string<T, A> &&rhs) {
		return std::move(rhs.insert(0, lhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(const T *lhs, basic_string<T, A> &&rhs) {
		return std::move(rhs.insert(0, lhs));
	}

	template <typename T, typename A>
	constexpr basic_string<T, A> operator+(T lhs, basic_string<T, A> &&rhs) {
		return std::move(rhs.insert(0, 1, lhs));
	}
#pragma endregion

	template <typename T, typename A>
	[[nodiscard]] constexpr bool operator==(const basic_string<T, A> &lhs, const basic_string<T, A> &rhs) {
		return lhs.compare(rhs) == 0;
	}

	template <typename T, typename A>
	[[nodiscard]] constexpr auto operator<=>(const basic_string<T, A> lhs, const basic_string<T, A> rhs) {
		return lhs.compare(rhs) <=> 0;
	}

	template <typename T, typename A>
	[[nodiscard]] constexpr bool operator==(const basic_string<T, A> &lhs, const T *rhs) {
		return lhs.compare(rhs) == 0;
	}

	template <typename T, typename A>
	[[nodiscard]] constexpr auto operator<=>(const basic_string<T, A> lhs, const T *rhs) {
		return lhs.compare(rhs) <=> 0;
	}

	template <typename T, typename A>
	constexpr void swap(basic_string<T, A> &lhs, basic_string<T, A> &rhs) {
		lhs.swap(rhs);
	}

	// TODO erase
	// TODO erase_if
	// TODO hash
	// TODO operator <<
	// TODO operator >>
	// TODO getline
	// TODO numeric conversions

	/**
	 * @brief A dynamically-sized string of char characters
	 *
	 */
	using string = basic_string<char>;

	/**
	 * @brief A dynamically-sized string of wchar_t characters
	 *
	 */
	using wstring = basic_string<wchar_t>;

	/**
	 * @brief A dynamically-sized string of char8_t characters
	 *
	 */
	using u8string = basic_string<char8_t>;

	/**
	 * @brief A dynamically-sized string of char16_t characters
	 *
	 */
	using u16string = basic_string<char16_t>;

	/**
	 * @brief A dynamically-sized string of char32_t characters
	 *
	 */
	using u32string = basic_string<char32_t>;

	inline namespace literals {
		inline namespace string_literals {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
			inline constexpr string operator""s(const char *str, size_t len) {
				return std::string(str, len);
			}

			inline constexpr wstring operator""s(const wchar_t *str, size_t len) {
				return std::wstring(str, len);
			}

			inline constexpr u8string operator""s(const char8_t *str, size_t len) {
				return std::u8string(str, len);
			}

			inline constexpr u16string operator""s(const char16_t *str, size_t len) {
				return std::u16string(str, len);
			}

			inline constexpr u32string operator""s(const char32_t *str, size_t len) {
				return std::u32string(str, len);
			}
#pragma GCC diagnostic pop
		}
	}

	namespace pmr {
		/**
		 * @brief Class template encapsulating a dynamic-size sequence of characters
		 *
		 * @tparam T The underlying character type
		 *
		 * @link https://en.cppreference.com/w/cpp/string/basic_string @endlink
		 */
		template <typename T>
		using basic_string = std::basic_string<T, std::pmr::polymorphic_allocator<T>>;

		/**
		 * @brief A dynamically-sized string of char characters
		 *
		 */
		using string = basic_string<char>;

		/**
		 * @brief A dynamically-sized string of wchar_t characters
		 *
		 */
		using wstring = basic_string<wchar_t>;

		/**
		 * @brief A dynamically-sized string of char8_t characters
		 *
		 */
		using u8string = basic_string<char8_t>;

		/**
		 * @brief A dynamically-sized string of char16_t characters
		 *
		 */
		using u16string = basic_string<char16_t>;

		/**
		 * @brief A dynamically-sized string of char32_t characters
		 *
		 */
		using u32string = basic_string<char32_t>;
	}
}

using namespace std::literals::string_literals;