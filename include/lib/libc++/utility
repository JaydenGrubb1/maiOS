/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2023-07-31
 * @brief Various utility components
 *
 * Copyright (c) 2023, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include <type_traits>

namespace std {
	/**
	 * @brief Forward an lvalue as either an lvalue or an rvalue
	 *
	 * @tparam T The type of the value to be forwarded
	 * @param t The value to be forwarded
	 * @return The forwarded value
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/forward @endlink
	 */
	template <typename T>
	[[nodiscard]] constexpr T &&forward(remove_reference_t<T> &t) noexcept {
		return static_cast<T &&>(t);
	}

	/**
	 * @brief Forward an rvalue as an rvalue
	 *
	 * @tparam T The type of the value to be forwarded
	 * @param t The value to be forwarded
	 * @return The forwarded value
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/forward @endlink
	 */
	template <typename T>
	[[nodiscard]] constexpr T &&forward(remove_reference_t<T> &&t) noexcept {
		static_assert(!is_lvalue_reference_v<T>, "Can't forward an rvalue reference as an lvalue");
		return static_cast<T &&>(t);
	}

	/**
	 * @brief Convert a value to an rvalue
	 *
	 * @tparam T The type of the value to be moved
	 * @param t The value to be moved
	 * @return The moved value
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/move @endlink
	 */
	template <typename T>
	[[nodiscard]] constexpr remove_reference_t<T> &&move(T &&t) noexcept {
		return static_cast<remove_reference_t<T> &&>(t);
	}

	/**
	 * @brief Swap the values of two objects
	 *
	 * @tparam T The type of the objects to be swapped
	 * @param a The first object
	 * @param b The second object
	 *
	 * @link https://en.cppreference.com/w/cpp/algorithm/swap @endlink
	 */
	template <typename T>
	constexpr void swap(T &a, T &b) noexcept(is_nothrow_move_constructible_v<T> &&is_nothrow_move_assignable_v<T>)
		requires(is_move_constructible_v<T> && is_move_assignable_v<T>)
	{
		T tmp = move(a);
		a = move(b);
		b = move(tmp);
	}

	/**
	 * @brief Swap the values of two arrays
	 *
	 * @tparam T The type of the arrays to be swapped
	 * @tparam N The size of the arrays to be swapped
	 * @param a The first array
	 * @param b The second array
	 *
	 * @link https://en.cppreference.com/w/cpp/algorithm/swap @endlink
	 */
	template <class T, size_t N>
	constexpr void swap(T (&a)[N], T (&b)[N]) noexcept(is_nothrow_swappable_v<T>)
		requires(is_swappable_v<T>)
	{
		for (size_t i = 0; i < N; ++i) {
			swap(a[i], b[i]);
		}
	}

	/**
	 * @brief Construct an object in-place
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	struct in_place_t {
		explicit in_place_t() = default;
	};

	/**
	 * @brief Construct an object in-place
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	inline constexpr in_place_t in_place{};

	/**
	 * @brief Construct an object in-place
	 *
	 * @tparam T The type of the object to be constructed
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	template <typename T>
	struct in_place_type_t {
		explicit in_place_type_t() = default;
	};

	/**
	 * @brief Construct an object in-place
	 *
	 * @tparam T The type of the object to be constructed
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	template <typename T>
	inline constexpr in_place_type_t<T> in_place_type{};

	/**
	 * @brief Construct an object in-place
	 *
	 * @tparam I The index of the object to be constructed
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	template <size_t I>
	struct in_place_index_t {
		explicit in_place_index_t() = default;
	};

	/**
	 * @brief Construct an object in-place
	 *
	 * @tparam I The index of the object to be constructed
	 *
	 * @link https://en.cppreference.com/w/cpp/utility/in_place @endlink
	 */
	template <size_t I>
	inline constexpr in_place_index_t<I> in_place_index{};
}