/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2023-08-01
 * @brief Proxy object that provides access to an array of objects of type T.
 *
 * Copyright (c) 2023, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

namespace std {
	/**
	 * @brief Proxy object that provides access to an array of objects of type T
	 *
	 * @tparam T The type of the elements in the list
	 */
	template <typename T>
	class initializer_list {
	  private:
		T *_array;
		size_t _len;

		/**
		 * @brief Construct a new initializer list object
		 *
		 * @note This constructor is private and only used by the compiler
		 */
		constexpr initializer_list(T *array, size_t len)
			: _array(array), _len(len) {}

	  public:
		typedef T value_type;
		typedef const T &reference;
		typedef const T &const_reference;
		typedef size_t size_type;
		typedef const T *iterator;
		typedef const T *const_iterator;

		/**
		 * @brief Construct a new initializer list object
		 *
		 */
		constexpr initializer_list() noexcept
			: _array(0), _len(0) {}

		/**
		 * @brief Get the number of elements in the list
		 *
		 * @return The number of elements in the list
		 */
		constexpr size_type size() const noexcept {
			return _len;
		}

		/**
		 * @brief Get the first element in the list
		 *
		 * @return The first element in the list
		 */
		constexpr const_iterator begin() const noexcept {
			return _array;
		}

		/**
		 * @brief Get the last element in the list
		 *
		 * @return The last element in the list
		 */
		constexpr const_iterator end() const noexcept {
			return begin() + size();
		}
	};

	/**
	 * @brief Get the first element in an initializer list
	 *
	 * @tparam T The type of the elements in the list
	 * @param list The list to get the element from
	 * @return The first element in the list
	 */
	template <class T>
	constexpr const T *begin(initializer_list<T> list) noexcept {
		return list.begin();
	}

	/**
	 * @brief Get the last element in an initializer list
	 *
	 * @tparam T The type of the elements in the list
	 * @param list The list to get the element from
	 * @return The last element in the list
	 */
	template <class T>
	constexpr const T *end(initializer_list<T> list) noexcept {
		return list.end();
	}
}