/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2023-08-01
 * @brief Various types and templates used in metaprogramming for
 * compile-time type checking and optimization.
 * @link https://en.cppreference.com/w/cpp/header/type_traits @endlink
 *
 * Copyright (c) 2023, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#define __need_size_t
#include <stddef.h>

namespace std {
	// Common base class for all type traits
	// https://en.cppreference.com/w/cpp/types/integral_constant
	template <typename T, T v>
	struct integral_constant {
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; }
	};

	// Boolean constant
	template <bool B>
	using bool_constant = integral_constant<bool, B>;

	// Boolean values
	using true_type = bool_constant<true>;
	using false_type = bool_constant<false>;

	// Provides the unchanged type argument
	// https://en.cppreference.com/w/cpp/types/type_identity
	template <typename T>
	struct type_identity {
		using type = T;
	};
	template <typename T>
	using type_identity_t = typename type_identity<T>::type;

	// Provides type for void
	// https://en.cppreference.com/w/cpp/types/void_t
	template <typename...>
	using void_t = void;

	// Utility to detect whether T is referenceable
	template <typename T, typename = void>
	struct __is_referenceable : public false_type{};
	template <typename T>
	struct __is_referenceable<T, void_t<T &>> : public true_type{};
	template <typename T>
	inline constexpr bool __is_referenceable_v = __is_referenceable<T>::value;

	// Compares two types for equality
	// https://en.cppreference.com/w/cpp/types/is_same
	template <typename T, typename U>
	struct is_same : false_type {};
	template <typename T>
	struct is_same<T, T> : true_type {};
	template <typename T, typename U>
	inline constexpr bool is_same_v = is_same<T, U>::value;

	// Checks whether B is the base class of D
	// https://en.cppreference.com/w/cpp/types/is_base_of
	template <typename B, typename D>
	struct is_base_of : bool_constant<__is_base_of(B, D)> {};
	template <typename B, typename D>
	inline constexpr bool is_base_of_v = is_base_of<B, D>::value;

	// Conditionally selects either T or F depending on B
	// https://en.cppreference.com/w/cpp/types/conditional
	template <bool B, typename T, typename F>
	struct conditional {
		typedef T type;
	};
	template <typename T, typename F>
	struct conditional<false, T, F> {
		typedef F type;
	};
	template <bool B, typename T, typename F>
	using conditional_t = typename conditional<B, T, F>::type;

	// Enables template if B is true
	// https://en.cppreference.com/w/cpp/types/enable_if
	template <bool B, typename T = void>
	struct enable_if {};
	template <typename T>
	struct enable_if<true, T> {
		typedef T type;
	};
	template <bool B, typename T = void>
	using enable_if_t = typename enable_if<B, T>::type;

	// Performs the logical conjunction of B...
	// https://en.cppreference.com/w/cpp/types/conjunction
	template <typename...>
	struct conjunction : true_type {};
	template <typename B1>
	struct conjunction<B1> : B1 {};
	template <typename B1, typename... Bn>
	struct conjunction<B1, Bn...>
		: conditional_t<bool(B1::value), conjunction<Bn...>, B1> {};
	template <typename... B>
	inline constexpr bool conjunction_v = conjunction<B...>::value;

	// Performs the logical disjunction of B...
	// https://en.cppreference.com/w/cpp/types/disjunction
	template <typename...>
	struct disjunction : false_type {};
	template <typename B1>
	struct disjunction<B1> : B1 {};
	template <typename B1, typename... Bn>
	struct disjunction<B1, Bn...>
		: conditional_t<bool(B1::value), B1, disjunction<Bn...>> {};
	template <typename... B>
	inline constexpr bool disjunction_v = disjunction<B...>::value;

	// Performs the logical negation of B
	// https://en.cppreference.com/w/cpp/types/negation
	template <typename B>
	struct negation : bool_constant<!bool(B::value)> {};
	template <typename B>
	inline constexpr bool negation_v = negation<B>::value;

	// Add lvalue reference to a type
	// https://en.cppreference.com/w/cpp/types/add_reference
	template <typename T, bool = __is_referenceable_v<T>>
	struct __add_lvalue_reference {
		typedef T type;
	};
	template <typename T>
	struct __add_lvalue_reference<T, true> {
		typedef T &type;
	};
	template <typename T>
	struct add_lvalue_reference : __add_lvalue_reference<T> {};
	template <typename T>
	using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

	// Add rvalue reference to a type
	// https://en.cppreference.com/w/cpp/types/add_reference
	template <typename T, bool = __is_referenceable_v<T>>
	struct __add_rvalue_reference {
		typedef T type;
	};
	template <typename T>
	struct __add_rvalue_reference<T, true> {
		typedef T &&type;
	};
	template <typename T>
	struct add_rvalue_reference : __add_rvalue_reference<T> {};
	template <typename T>
	using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

	// Removes a reference from a type
	// https://en.cppreference.com/w/cpp/types/remove_reference
	template <typename T>
	struct remove_reference {
		typedef T type;
	};
	template <typename T>
	struct remove_reference<T &> {
		typedef T type;
	};
	template <typename T>
	struct remove_reference<T &&> {
		typedef T type;
	};
	template <typename T>
	using remove_reference_t = typename remove_reference<T>::type;

	// Add const, volatile, or both qualifiers to a type
	// https://en.cppreference.com/w/cpp/types/add_cv
	template <typename T>
	struct add_cv {
		typedef const volatile T type;
	};
	template <typename T>
	struct add_const {
		typedef const T type;
	};
	template <typename T>
	struct add_volatile {
		typedef volatile T type;
	};
	template <typename T>
	using add_cv_t = typename add_cv<T>::type;
	template <typename T>
	using add_const_t = typename add_const<T>::type;
	template <typename T>
	using add_volatile_t = typename add_volatile<T>::type;

	// Remove const, volatile, or both qualifiers from a type
	// https://en.cppreference.com/w/cpp/types/remove_cv
	template <typename T>
	struct remove_cv {
		typedef T type;
	};
	template <typename T>
	struct remove_cv<const T> {
		typedef T type;
	};
	template <typename T>
	struct remove_cv<volatile T> {
		typedef T type;
	};
	template <typename T>
	struct remove_cv<const volatile T> {
		typedef T type;
	};
	template <typename T>
	struct remove_const {
		typedef T type;
	};
	template <typename T>
	struct remove_const<const T> {
		typedef T type;
	};
	template <typename T>
	struct remove_volatile {
		typedef T type;
	};
	template <typename T>
	struct remove_volatile<volatile T> {
		typedef T type;
	};
	template <typename T>
	using remove_cv_t = typename remove_cv<T>::type;
	template <typename T>
	using remove_const_t = typename remove_const<T>::type;
	template <typename T>
	using remove_volatile_t = typename remove_volatile<T>::type;

	// Checks whether T is const-qualified
	// https://en.cppreference.com/w/cpp/types/is_const
	template <typename T>
	struct is_const : false_type {};
	template <typename T>
	struct is_const<const T> : true_type {};
	template <typename T>
	inline constexpr bool is_const_v = is_const<T>::value;

	// Checks whether T is volatile-qualified
	// https://en.cppreference.com/w/cpp/types/is_volatile
	template <typename T>
	struct is_volatile : false_type {};
	template <typename T>
	struct is_volatile<volatile T> : true_type {};
	template <typename T>
	inline constexpr bool is_volatile_v = is_volatile<T>::value;

	// Checks whether T is a trivial type
	// https://en.cppreference.com/w/cpp/types/is_trivial
	template <typename T>
	struct is_trivial : bool_constant<__is_trivial(T)> {};
	template <typename T>
	inline constexpr bool is_trivial_v = is_trivial<T>::value;

	// Check whether T is a trivially copyable type
	// https://en.cppreference.com/w/cpp/types/is_trivially_copyable
	template <typename T>
	struct is_trivially_copyable : bool_constant<__is_trivially_copyable(T)> {};
	template <typename T>
	inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

	// Checks whether T is a standard-layout type
	// https://en.cppreference.com/w/cpp/types/is_standard_layout
	template <typename T>
	struct is_standard_layout : bool_constant<__is_standard_layout(T)> {};
	template <typename T>
	inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

	// Checks whether T is empty
	// https://en.cppreference.com/w/cpp/types/is_empty
	template <typename T>
	struct is_empty : bool_constant<__is_empty(T)> {};
	template <typename T>
	inline constexpr bool is_empty_v = is_empty<T>::value;

	// Checks whether T is a polymorphic type
	// https://en.cppreference.com/w/cpp/types/is_polymorphic
	template <typename T>
	struct is_polymorphic : bool_constant<__is_polymorphic(T)> {};
	template <typename T>
	inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

	// Checks whether T is an abstract type
	// https://en.cppreference.com/w/cpp/types/is_abstract
	template <typename T>
	struct is_abstract : bool_constant<__is_abstract(T)> {};
	template <typename T>
	inline constexpr bool is_abstract_v = is_abstract<T>::value;

	// Checks whether T is a final type
	// https://en.cppreference.com/w/cpp/types/is_final
	template <typename T>
	struct is_final : bool_constant<__is_final(T)> {};
	template <typename T>
	inline constexpr bool is_final_v = is_final<T>::value;

	// Checks whether T is an aggregate type
	// https://en.cppreference.com/w/cpp/types/is_aggregate
	template <typename T>
	struct is_aggregate : bool_constant<__is_aggregate(remove_cv_t<T>)> {};
	template <typename T>
	inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

	// Checks whether T is a void type
	// https://en.cppreference.com/w/cpp/types/is_void
	template <typename T>
	struct is_void : is_same<void, remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_void_v = is_void<T>::value;

	// Checks whether T is a nullptr_t
	// https://en.cppreference.com/w/cpp/types/is_null_pointer
	template <typename T>
	struct is_null_pointer : is_same<decltype(nullptr), remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

	// Checks whether T is an integral type
	// https://en.cppreference.com/w/cpp/types/is_integral
	template <class T>
	struct __is_integral : false_type{};
	template <>
	struct __is_integral<bool> : true_type{};
	template <>
	struct __is_integral<char> : true_type{};
	template <>
	struct __is_integral<signed char> : true_type{};
	template <>
	struct __is_integral<unsigned char> : true_type{};
	template <>
	struct __is_integral<char8_t> : true_type{};
	template <>
	struct __is_integral<char16_t> : true_type{};
	template <>
	struct __is_integral<char32_t> : true_type{};
	template <>
	struct __is_integral<wchar_t> : true_type{};
	template <>
	struct __is_integral<short> : true_type{};
	template <>
	struct __is_integral<unsigned short> : true_type{};
	template <>
	struct __is_integral<int> : true_type{};
	template <>
	struct __is_integral<unsigned int> : true_type{};
	template <>
	struct __is_integral<long> : true_type{};
	template <>
	struct __is_integral<unsigned long> : true_type{};
	template <>
	struct __is_integral<long long> : true_type{};
	template <>
	struct __is_integral<unsigned long long> : true_type{};
	template <typename T>
	struct is_integral : __is_integral<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_integral_v = is_integral<T>::value;

	// Checks whether T is a floating-point type
	// https://en.cppreference.com/w/cpp/types/is_floating_point
	template <typename T>
	struct __is_floating_point : false_type{};
	template <>
	struct __is_floating_point<float> : true_type{};
	template <>
	struct __is_floating_point<double> : true_type{};
	template <>
	struct __is_floating_point<long double> : true_type{};
	template <typename T>
	struct is_floating_point : __is_floating_point<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

	// Checks whether T is an array type
	// https://en.cppreference.com/w/cpp/types/is_array
	template <typename T>
	struct is_array : false_type {};
	template <typename T>
	struct is_array<T[]> : true_type {};
	template <typename T, size_t N>
	struct is_array<T[N]> : true_type {};
	template <typename T>
	inline constexpr bool is_array_v = is_array<T>::value;

	// Checks whether T is an enum type
	// https://en.cppreference.com/w/cpp/types/is_enum
	template <typename T>
	struct is_enum : bool_constant<__is_enum(T)> {};
	template <typename T>
	inline constexpr bool is_enum_v = is_enum<T>::value;

	// Checks whether T is an union type
	// https://en.cppreference.com/w/cpp/types/is_union
	template <typename T>
	struct is_union : bool_constant<__is_union(T)> {};
	template <typename T>
	inline constexpr bool is_union_v = is_union<T>::value;

	// Checks whether T is a class type
	// https://en.cppreference.com/w/cpp/types/is_class
	template <typename T>
	struct is_class : bool_constant<__is_class(T)> {};
	template <typename T>
	inline constexpr bool is_class_v = is_class<T>::value;

	// Checks whether T is a function type
	// https://en.cppreference.com/w/cpp/types/is_function
	template <typename T>
	struct is_function : public bool_constant<!is_const_v<const T>> {};
	template <typename T>
	struct is_function<T &> : public false_type {};
	template <typename T>
	struct is_function<T &&> : public false_type {};
	template <typename T>
	inline constexpr bool is_function_v = is_function<T>::value;

	// Checks whether T is a pointer type
	// https://en.cppreference.com/w/cpp/types/is_pointer
	template <typename T>
	struct __is_pointer : false_type{};
	template <typename T>
	struct __is_pointer<T *> : true_type{};
	template <typename T>
	struct is_pointer : __is_pointer<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_pointer_v = is_pointer<T>::value;

	// Checks whether T is an lvalue reference type
	// https://en.cppreference.com/w/cpp/types/is_lvalue_reference
	template <typename T>
	struct is_lvalue_reference : false_type {};
	template <typename T>
	struct is_lvalue_reference<T &> : true_type {};
	template <typename T>
	inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

	// Checks whether T is an rvalue reference type
	// https://en.cppreference.com/w/cpp/types/is_rvalue_reference
	template <typename T>
	struct is_rvalue_reference : false_type {};
	template <typename T>
	struct is_rvalue_reference<T &&> : true_type {};
	template <typename T>
	inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

	// Checks whether T is a member object pointer type
	// https://en.cppreference.com/w/cpp/types/is_member_object_pointer
	template <typename T>
	struct __is_member_object_pointer : false_type{};
	template <typename T, typename U>
	struct __is_member_object_pointer<T U::*> : bool_constant<!is_function_v<T>>{};
	template <typename T>
	struct is_member_object_pointer : __is_member_object_pointer<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

	// Checks whether T is a member function pointer type
	// https://en.cppreference.com/w/cpp/types/is_member_function_pointer
	template <typename T>
	struct __is_member_function_pointer : false_type{};
	template <typename T, typename U>
	struct __is_member_function_pointer<T U::*> : bool_constant<is_function_v<T>>{};
	template <typename T>
	struct is_member_function_pointer : __is_member_function_pointer<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

	// Checks whether T is an arithmetic type
	// https://en.cppreference.com/w/cpp/types/is_arithmetic
	template <typename T>
	struct is_arithmetic : bool_constant<is_integral_v<T> || is_floating_point_v<T>> {};
	template <typename T>
	inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

	// Checks whether T is a fundamental type
	// https://en.cppreference.com/w/cpp/types/is_fundamental
	template <typename T>
	struct is_fundamental : bool_constant<is_arithmetic_v<T> || is_void_v<T> || is_null_pointer_v<T>> {};
	template <typename T>
	inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

	// Checks whether T is a member pointer type
	// https://en.cppreference.com/w/cpp/types/is_member_pointer
	template <typename T>
	struct __is_member_pointer : false_type{};
	template <typename T, typename U>
	struct __is_member_pointer<T U::*> : true_type{};
	template <typename T>
	struct is_member_pointer : __is_member_pointer<remove_cv_t<T>> {};
	template <typename T>
	inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

	// Checks whether T is a scalar type
	// https://en.cppreference.com/w/cpp/types/is_scalar
	template <typename T>
	struct is_scalar : bool_constant<is_arithmetic_v<T> || is_enum_v<T> || is_pointer_v<T> || is_member_pointer_v<T> || is_null_pointer_v<T>> {};
	template <typename T>
	inline constexpr bool is_scalar_v = is_scalar<T>::value;

	// Checks whether T is a reference type
	// https://en.cppreference.com/w/cpp/types/is_reference
	template <typename T>
	struct is_reference : bool_constant<is_lvalue_reference_v<T> || is_rvalue_reference_v<T>> {};
	template <typename T>
	inline constexpr bool is_reference_v = is_reference<T>::value;

	// Checks whether T is an object type
	// https://en.cppreference.com/w/cpp/types/is_object
	template <typename T>
	struct is_object : bool_constant<!(is_function_v<T> || is_reference_v<T> || is_void_v<T>)> {};
	template <typename T>
	inline constexpr bool is_object_v = is_object<T>::value;

	// Checks whether T is a compound type
	// https://en.cppreference.com/w/cpp/types/is_compound
	template <typename T>
	struct is_compound : bool_constant<!is_fundamental_v<T>> {};
	template <typename T>
	inline constexpr bool is_compound_v = is_compound<T>::value;

	// Add pointer to a type
	// https://en.cppreference.com/w/cpp/types/add_pointer
	template <typename T, bool = __is_referenceable_v<T> || is_void_v<T>>
	struct __add_pointer {
		typedef T type;
	};
	template <typename T>
	struct __add_pointer<T, true> {
		typedef typename remove_reference<T>::type *type;
	};
	template <typename T>
	struct add_pointer : __add_pointer<T> {};
	template <typename T>
	using add_pointer_t = typename add_pointer<T>::type;

	// Remove pointer from a type
	// https://en.cppreference.com/w/cpp/types/remove_pointer
	template <typename T, typename>
	struct __remove_pointer {
		typedef T type;
	};
	template <typename T, typename U>
	struct __remove_pointer<T, U *> {
		typedef U type;
	};
	template <typename T>
	struct remove_pointer : __remove_pointer<T, remove_cv_t<T>> {};
	template <typename T>
	using remove_pointer_t = typename remove_pointer<T>::type;

	// Checks whether T is a constructible type
	// https://en.cppreference.com/w/cpp/types/is_constructible
	template <typename T, typename... Args>
	struct is_constructible : bool_constant<__is_constructible(T, Args...)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename... Args>
	inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

	// Checks whether T is a trivially constructible type
	// https://en.cppreference.com/w/cpp/types/is_constructible
	template <typename T, typename... Args>
	struct is_trivially_constructible : bool_constant<__is_trivially_constructible(T, Args...)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename... Args>
	inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;

	// Checks whether T is a nothrow constructible type
	// https://en.cppreference.com/w/cpp/types/is_constructible
	template <typename T, typename... Args>
	struct is_nothrow_constructible : bool_constant<__is_nothrow_constructible(T, Args...)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename... Args>
	inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<T, Args...>::value;

	// Checks whether T is a default constructible type
	// https://en.cppreference.com/w/cpp/types/is_default_constructible
	template <typename T>
	struct is_default_constructible : is_constructible<T> {};
	template <typename T>
	inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;

	// Checks whether T is a trivially default constructible type
	// https://en.cppreference.com/w/cpp/types/is_default_constructible
	template <typename T>
	struct is_trivially_default_constructible : is_trivially_constructible<T> {};
	template <typename T>
	inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<T>::value;

	// Checks whether T is a nothrow default constructible type
	// https://en.cppreference.com/w/cpp/types/is_default_constructible
	template <typename T>
	struct is_nothrow_default_constructible : is_nothrow_constructible<T> {};
	template <typename T>
	inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<T>::value;

	// Checks whether T is a copy constructible type
	// https://en.cppreference.com/w/cpp/types/is_copy_constructible
	template <typename T>
	struct is_copy_constructible : is_constructible<T, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_copy_constructible_v = is_copy_constructible<T>::value;

	// Checks whether T is a trivially copy constructible type
	// https://en.cppreference.com/w/cpp/types/is_copy_constructible
	template <typename T>
	struct is_trivially_copy_constructible : is_trivially_constructible<T, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;

	// Checks whether T is a nothrow copy constructible type
	// https://en.cppreference.com/w/cpp/types/is_copy_constructible
	template <typename T>
	struct is_nothrow_copy_constructible : is_nothrow_constructible<T, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<T>::value;

	// Checks whether T is a move constructible type
	// https://en.cppreference.com/w/cpp/types/is_move_constructible
	template <typename T>
	struct is_move_constructible : is_constructible<T, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

	// Checks whether T is a trivially move constructible type
	// https://en.cppreference.com/w/cpp/types/is_move_constructible
	template <typename T>
	struct is_trivially_move_constructible : is_trivially_constructible<T, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;

	// Checks whether T is a nothrow move constructible type
	// https://en.cppreference.com/w/cpp/types/is_move_constructible
	template <typename T>
	struct is_nothrow_move_constructible : is_nothrow_constructible<T, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<T>::value;

	// Checks whether T is an assignable type
	// https://en.cppreference.com/w/cpp/types/is_assignable
	template <typename T, typename U>
	struct is_assignable : bool_constant<__is_assignable(T, U)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename U>
	inline constexpr bool is_assignable_v = is_assignable<T, U>::value;

	// Checks whether T is a trivially assignable type
	// https://en.cppreference.com/w/cpp/types/is_assignable
	template <typename T, typename U>
	struct is_trivially_assignable : bool_constant<__is_trivially_assignable(T, U)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename U>
	inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;

	// Checks whether T is a nothrow assignable type
	// https://en.cppreference.com/w/cpp/types/is_assignable
	template <typename T, typename U>
	struct is_nothrow_assignable : bool_constant<__is_nothrow_assignable(T, U)> {
		// TODO assert that T is a complete type
	};
	template <typename T, typename U>
	inline constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<T, U>::value;

	// Checks whether T is a copy assignable type
	// https://en.cppreference.com/w/cpp/types/is_copy_assignable
	template <typename T>
	struct is_copy_assignable : is_assignable<add_lvalue_reference_t<T>, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_copy_assignable_v = is_copy_assignable<T>::value;

	// Checks whether T is a trivially copy assignable type
	// https://en.cppreference.com/w/cpp/types/is_copy_assignable
	template <typename T>
	struct is_trivially_copy_assignable : is_trivially_assignable<add_lvalue_reference_t<T>, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;

	// Checks whether T is a nothrow copy assignable type
	// https://en.cppreference.com/w/cpp/types/is_copy_assignable
	template <typename T>
	struct is_nothrow_copy_assignable : is_nothrow_assignable<add_lvalue_reference_t<T>, add_lvalue_reference_t<const T>> {};
	template <typename T>
	inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<T>::value;

	// Checks whether T is a move assignable type
	// https://en.cppreference.com/w/cpp/types/is_move_assignable
	template <typename T>
	struct is_move_assignable : is_assignable<add_lvalue_reference_t<T>, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_move_assignable_v = is_move_assignable<T>::value;

	// Checks whether T is a trivially move assignable type
	// https://en.cppreference.com/w/cpp/types/is_move_assignable
	template <typename T>
	struct is_trivially_move_assignable : is_trivially_assignable<add_lvalue_reference_t<T>, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;

	// Checks whether T is a nothrow move assignable type
	// https://en.cppreference.com/w/cpp/types/is_move_assignable
	template <typename T>
	struct is_nothrow_move_assignable : is_nothrow_assignable<add_lvalue_reference_t<T>, add_rvalue_reference_t<T>> {};
	template <typename T>
	inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<T>::value;

	// TODO is_signed
	// TODO is_unsigned
	// TODO is_bound_array
	// TODO is_unbound_array
	// TODO allignment_of
	// TODO rank
	// TODO extent
	// TODO is_convertible
	// TODO is_nothrow_convertible
	// TODO is_layout_compatible
	// TODO is_pointer_interconvertible_base_of
	// TODO is_invocable
	// TODO is_invocable_r
	// TODO is_nothrow_invocable
	// TODO is_nothrow_invocable_r
	// TODO make_signed
	// TODO make_unsigned
	// TODO remove_extent
	// TODO remove_all_extents
	// TODO alligned_storage	// deprecated in c++23
	// TODO alligned_union		// deprecated in c++23
	// TODO decay
	// TODO remove_cvref
	// TODO common_type
	// TODO common_reference
	// TODO basic_common_reference
	// TODO underlying_type
	// TODO result_of
	// TODO invoke_result
	// TODO is_pointer_interconvertible_with_class
	// TODO is_corresponding_member
	// TODO is_constantly_evaluated
	// TODO is_destructible
	// TODO is_trivially_destructible
	// TODO is_nothrow_destructible
	// TODO has_virtual_destructor
	// TODO is_swappable_with
	// TODO is_swappable
	// TODO is_nothrow_swappable_with
	// TODO is_nothrow_swappable
}