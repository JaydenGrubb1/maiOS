/**
 * @author Jayden Grubb (contact@jaydengrubb.com)
 * @date 2023-08-01
 * @brief Various types and templates used in metaprogramming for
 * compile-time type checking and optimization.
 * @link https://en.cppreference.com/w/cpp/header/type_traits @endlink
 *
 * Copyright (c) 2023, Jayden Grubb
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

namespace std {
	/**
	 * @brief Common base class for all type traits
	 *
	 * @tparam T The type to be tested
	 * @tparam v The value of the type trait
	 *
	 * @link https://en.cppreference.com/w/cpp/types/integral_constant @endlink
	 */
	template <typename T, T v>
	struct integral_constant {
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; }
	};

	/**
	 * @brief A helper type for std::true_type and std::false_type
	 *
	 * @tparam B The value of the type trait
	 *
	 * @link https://en.cppreference.com/w/cpp/types/integral_constant @endlink
	 */
	template <bool B>
	using bool_constant = integral_constant<bool, B>;

	/**
	 * @brief The type trait representing the boolean value true
	 *
	 * @link https://en.cppreference.com/w/cpp/types/integral_constant @endlink
	 */
	using true_type = bool_constant<true>;

	/**
	 * @brief The type trait representing the boolean value false
	 *
	 * @link https://en.cppreference.com/w/cpp/types/integral_constant @endlink
	 */
	using false_type = bool_constant<false>;

	/**
	 * @brief If T and U are the same type, provides the member constant value equal to true.
	 * Otherwise value is false.
	 *
	 * @tparam T The first type to be compared
	 * @tparam U The second type to be compared
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_same @endlink
	 */
	template <typename T, typename U>
	struct is_same : false_type {};

	/**
	 * @brief If T and U are the same type, provides the member constant value equal to true.
	 * Otherwise value is false.
	 *
	 * @tparam T The type to be compared
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_same @endlink
	 */
	template <typename T>
	struct is_same<T, T> : true_type {};

	/**
	 * @brief If the type T is a reference type, provides the member typedef type which is the
	 * type referred to by T. Otherwise type is T.
	 *
	 * @tparam T The type to be dereferenced
	 *
	 * @link https://en.cppreference.com/w/cpp/types/remove_reference @endlink
	 */
	template <typename T>
	struct remove_reference {
		typedef T type;
	};

	/**
	 * @brief If the type T is a reference type, provides the member typedef type which is the
	 * type referred to by T. Otherwise type is T.
	 *
	 * @tparam T The type to be dereferenced
	 *
	 * @link https://en.cppreference.com/w/cpp/types/remove_reference @endlink
	 */
	template <typename T>
	struct remove_reference<T &> {
		typedef T type;
	};

	/**
	 * @brief If the type T is a reference type, provides the member typedef type which is the
	 * type referred to by T. Otherwise type is T.
	 *
	 * @tparam T The type to be dereferenced
	 *
	 * @link https://en.cppreference.com/w/cpp/types/remove_reference @endlink
	 */
	template <typename T>
	struct remove_reference<T &&> {
		typedef T type;
	};

	/**
	 * @brief If the type T is a reference type, provides the member typedef type which is the
	 * type referred to by T. Otherwise type is T.
	 *
	 * @tparam T The type to be dereferenced
	 *
	 * @link https://en.cppreference.com/w/cpp/types/remove_reference @endlink
	 */
	template <typename T>
	using remove_reference_t = typename remove_reference<T>::type;

	/**
	 * @brief Checks whether T is an lvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_lvalue_reference @endlink
	 */
	template <typename T>
	struct is_lvalue_reference : false_type {};

	/**
	 * @brief Checks whether T is an lvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_lvalue_reference @endlink
	 */
	template <typename T>
	struct is_lvalue_reference<T &> : true_type {};

	/**
	 * @brief Checks whether T is an lvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_lvalue_reference @endlink
	 */
	template <typename T>
	inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

	/**
	 * @brief Checks whether T is an rvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_rvalue_reference @endlink
	 */
	template <typename T>
	struct is_rvalue_reference : false_type {};

	/**
	 * @brief Checks whether T is an rvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_rvalue_reference @endlink
	 */
	template <typename T>
	struct is_rvalue_reference<T &&> : true_type {};

	/**
	 * @brief Checks whether T is an rvalue reference type.
	 *
	 * @tparam T The type to be checked
	 *
	 * @link https://en.cppreference.com/w/cpp/types/is_rvalue_reference @endlink
	 */
	template <typename T>
	inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;
}